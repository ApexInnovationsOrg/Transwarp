<?xml version="1.0" encoding="utf-8"?>
<transwarp:TranswarpBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   xmlns:transwarp="com.apexinnovations.transwarp.*"
			   xmlns:ui="com.apexinnovations.transwarp.ui.*"
			   preloader="com.apexinnovations.transwarp.preloader.PreloaderDisplay"
			   addedToStage="onAdded()"
			   applicationComplete="applicationCompleteHandler()">
	<fx:Declarations>
		<s:TitleWindow title="Title" id="errorDialog" close="PopUpManager.removePopUp(errorDialog); fscommand('quit');" width="400" height="300">
			<s:TextArea id="infoText" height="100%" width="100%"/> 
		</s:TitleWindow>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.data.Courseware;
			import com.apexinnovations.transwarp.data.Page;
			import com.apexinnovations.transwarp.data.User;
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			import com.apexinnovations.transwarp.webservices.*;
			
			import flash.events.*;
			import flash.system.fscommand;
			
			import mx.managers.PopUpManager;
			
			TranswarpVersion.revision = "$Rev$";
			
			[Bindable] protected var themeColor:uint = 0xcc3337;
			
			protected var manager:TranswarpSystemManager;
			protected var courseware:Courseware;
			
			protected var maximized:Boolean = false;
			protected var currentlyIdle:Boolean = false;
			
			
			override protected function createChildren():void {
				super.createChildren();
			
				manager = systemManager as TranswarpSystemManager;
				
				try {
					courseware = new Courseware(manager.xml);

					themeColor = courseware.color;
									
					topBar.searchPrompt = "Search " + courseware.product.name;
					topBar.hasSearch = !User.instance.lms;
					
					topBar.courses = courseware.product.courses;
					
				} catch ( e:Error ) {
					
					var log:LogService = new LogService();
					
					log.dispatch('XML Load Failure: ' + e.toString() + '\n' + e.getStackTrace());

					themeColor = 0xa8a8a8;
					popupErrorDialog('There was an error loading data from the server.\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111.');
				}
				
				
			}
			
			protected function maximize(event:FullScreenEvent):void {
				currentState = event.fullScreen ? "maximized" : "default";
			}

			protected function onAdded():void {
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, maximize);
			}

			protected function popupErrorDialog(info:String, title:String = 'Error'):void {
				if (!currentlyIdle) {
					if (errorDialog.isPopUp) PopUpManager.removePopUp(errorDialog);	// Take down any currently displayed dialogs
					
					PopUpManager.addPopUp(errorDialog, this, true);
					PopUpManager.centerPopUp(errorDialog);
					infoText.text = info;
					errorDialog.title = title;
				}
			}

			private function applicationCompleteHandler():void {
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, uncaughtErrorHandler);
			}
			
			private function uncaughtErrorHandler(event:UncaughtErrorEvent):void {
				var log:LogService = new LogService();
				
				if (event.error is Error) {
					var error:Error = event.error as Error;
					
					log.dispatch('UNHANDLED ERROR: ' + error.message + '\n\n' + error.getStackTrace());
					
					//popupErrorDialog('We are sorry, but there has been a problem and the application must be closed.\n\n' + error.message + '\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111.');
				} else if (event.error is ErrorEvent) {
					var errorEvent:ErrorEvent = event.error as ErrorEvent;
					
					log.dispatch('UNHANDLED EVENT: ' + errorEvent.type);
					
					//popupErrorDialog('We are sorry, but there has been a problem and the application must be closed.\n\n' + errorEvent.type + '\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111.');
				} else {
					// a non-Error, non-ErrorEvent type was thrown and uncaught
				}
			}
		
		]]>
	</fx:Script>
	
	<transwarp:states>
		<s:State name="default" />
		<s:State name="maximized" />
	</transwarp:states>
	
	<!--Setting this group's width to "100%" resulted in it being 10,000 px wide instead of what was expected.-->
	<s:VGroup width="{width}" height="100%" gap.default="-53" gap.maximized="-35">
		<ui:TopBar id="topBar"/>
		<ui:LeftBar id="leftBar" color="{themeColor}"/>
	</s:VGroup>
	
	<!--Bounds on the size of this save space on AS3 slides for instructions at the bottom (60px) and space for the title at the top (40px)-->
	<ui:ContentContainer id="container" mask="{contentMask}"  
						 left.default="263" left.maximized="52" 
						 top="{178 + (container.isAS2Content ? 40-40*container.contentScaleY : 40 )}" top.maximized="{35 + (container.isAS2Content ? 40-40*container.contentScaleY : 40)}"
						 right="0" bottom="{container.isAS2Content ? 0 : 60}"/>

	<ui:PageTitle top="200" top.maximized="55" left="290" left.maximized="80" right="0" textAlign="center"/>
	<s:Group width="{container.contentWidth}" height="{container.contentHeight}" scaleX="{container.contentScaleX}" scaleY="{container.contentScaleY}" x="{container.x + container.contentX}" y="{container.y + container.contentY}">
		<s:Group id="contentMask" width="100%" height="100%">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0x00ccff" alpha="0.4" />
				</s:fill>		
			</s:Rect>
		</s:Group>
<!--	<s:Rect width="100%" height="100%">
			<s:stroke>
				<s:SolidColorStroke color="0x333333" />
			</s:stroke>
		</s:Rect>
		<s:Rect top="0" left="0" bottom="0" right="0">
			<s:fill>
				<s:SolidColor />
			</s:fill>
			<s:filters>
				<s:BevelFilter angle="225" distance="3" blurX="4" blurY="4" strength="0.8" knockout="true" highlightColor="0xaaaaaa" />
			</s:filters>
		</s:Rect>-->
	</s:Group>
</transwarp:TranswarpBase>