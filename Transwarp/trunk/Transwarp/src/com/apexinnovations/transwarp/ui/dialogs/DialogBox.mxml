<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   skinClass="com.apexinnovations.transwarp.skins.DialogSkin"
			   title="Generic Dialog Box" visible="false"
			   addedToStage="addedToStage(event);" 
			   close="closeHandler(event);" 
			   mouseDown="mouseDown(event);" 
			   windowMoveEnd="resizeListener(event);"
			   removedFromStage="removedFromStage(event)"
			   fontSize="14">
	<s:layout>
		<s:VerticalLayout />
	</s:layout>
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			TranswarpVersion.revision = "$Rev$";
			
			protected var modal:Boolean = false;
			protected var _resizable:Boolean = false;
			
			// stage (X,Y) for where resize drag began. 
			protected var clickX:Number;
			protected var clickY:Number;
			
			// Width/Height when resizing began
			protected var initialWidth:Number;
			protected var initialHeight:Number;
			
			[SkinPart("false")]
			public var resizeHandle:UIComponent;
			
			public function get resizable():Boolean { return _resizable; }
			
			public function set resizable(value:Boolean):void {
				_resizable = value;
				if(resizeHandle)
					resizeHandle.visible = value;
			}
			
			protected function closeHandler(event:Event = null):void {
				if (modal) {
					// Can't just set visibility since hidden modal dialogs screw up focus for all dialogs
					stage.removeEventListener(Event.RESIZE, resizeListener); 
					PopUpManager.removePopUp(this);
				} else {
					visible = false;
				}
			}
			
			protected function addedToStage(event:Event):void {
				stage.addEventListener(Event.RESIZE, resizeListener);
			}
			
			protected function removedFromStage(event:Event):void {
				stage.removeEventListener(Event.RESIZE, resizeListener);
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseMoveHandler);
			}
			
			public function display():void {
				if (modal || !visible) {
					PopUpManager.centerPopUp(this);
				}
				visible = true;
				PopUpManager.bringToFront(this);
				setFocus();
				trace(width, height);
			}
			
			protected function mouseDown(event:MouseEvent):void {
				PopUpManager.bringToFront(this);
				setFocus();
			}
			
			// Try to put the dialog back into viewable stage if window changes size
			protected function resizeListener(event:Event):void {
				if (x > stage.stageWidth - width) x = stage.stageWidth - width;
				if (y > stage.stageHeight - height) y = stage.stageHeight - height;
				if (x < 0) x = 0;
				if (y < 0) y = 0;
			}
			
			override protected function partAdded(partName:String, instance:Object) : void {
				super.partAdded(partName, instance);
				
				if (instance == resizeHandle) {
					if(_resizable)
						resizeHandle.visible = true;
					resizeHandle.addEventListener(MouseEvent.MOUSE_DOWN, resizeClickHandler);
				}
			}
			
			override protected function partRemoved(partName:String, instance:Object):void {
				if (instance == resizeHandle)
					resizeHandle.removeEventListener(MouseEvent.MOUSE_DOWN, resizeClickHandler);
				
				super.partRemoved(partName, instance);
			}
			
			protected function resizeClickHandler(event:MouseEvent):void {
				clickX = event.stageX;
				clickY = event.stageY;
				
				initialWidth = width;
				initialHeight = height;
				
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
			}
			
			protected function mouseUpHandler(event:MouseEvent):void {
				stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			}
			
			protected function mouseMoveHandler(event:MouseEvent):void {
				var topleft:Point = stage.globalToLocal(localToGlobal(new Point(0,0)));
				width = Math.min(stage.stageWidth - topleft.x, Math.max(initialWidth + event.stageX - clickX, minWidth), maxWidth);
				height = Math.min(stage.stageHeight - topleft.y, Math.max(initialHeight + event.stageY - clickY, minHeight), maxHeight);
			}
			
		]]>
	</fx:Script>
</s:TitleWindow>
