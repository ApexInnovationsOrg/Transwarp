<?xml version="1.0" encoding="utf-8"?>
<dialogs:DialogBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:gfx="com.apexinnovations.transwarp.graphics.*"
				   xmlns:ui="com.apexinnovations.transwarp.ui.*"
				   xmlns:dialogs="com.apexinnovations.transwarp.ui.dialogs.*"
				   title="Drawing"
				   mouseOver="mouseOver();" mouseOut="mouseOut();">
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.Transwarp;
			import com.apexinnovations.transwarp.graphics.*;
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			
			import flash.display.*;
			import flash.geom.*;
			import flash.ui.*;
			
			import mx.managers.PopUpManager;
			
			import spark.core.SpriteVisualElement;
			
			TranswarpVersion.revision = "$Rev$";
			
			public var anchor:DisplayObject = null;
			protected var _drawing:Boolean = false;
			protected var _currentCursor:String = MouseCursor.AUTO;
			protected var _clickBlocker:Graphics = null;
			protected var _graphics:Graphics = null;
			protected var _canvas:SpriteVisualElement = null;

			public function hide():void {
				closeHandler(null);
			}
			
			// Fake a define
			protected function get DRAWING_CURSOR():String { return "draw"; }
			
			
			override protected function addedToStage(event:Event):void {
				var tw:Transwarp = this.parentApplication as Transwarp;
				_canvas = tw.canvas;
				_graphics = _canvas.graphics;
				_clickBlocker = tw.clickBlocker.graphics;
				
				stage.addEventListener(Event.RESIZE, blockInteractivity);
				stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDown);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMove);
				stage.addEventListener(MouseEvent.MOUSE_UP, mouseUp);
				
				super.addedToStage(event);
				blockInteractivity();
			}
			
			override protected function closeHandler(event:Event):void {
				toolSelected('stop');
				Mouse.cursor = _currentCursor;

				super.closeHandler(event);
			}
			
			override public function display():void {
				super.display();
				
				toolSelected('brush');
				Mouse.cursor = _currentCursor;
			}
			
			protected function createCursorBitmapData(radius:uint, color:uint, showFill:Boolean):BitmapData {
				var shp:Shape = new Shape();
				shp.graphics.lineStyle(0, 0x888888, 1, true);
				shp.graphics.beginFill(color, Number(showFill));
				shp.graphics.drawCircle(radius, radius, radius);
				shp.graphics.endFill();
				
				var diameter:uint = 2 * radius;
				
				var bounds:Rectangle = new Rectangle(0, 0, diameter+1, diameter+1);
				var bitmap:BitmapData = new BitmapData(diameter+1, diameter+1, true, 0);
				bitmap.draw(shp);
				
				return bitmap;
			}
			
			protected function createMouseCursor(radius:uint, color:uint, showFill:Boolean):String {
				if (Mouse["supportsNativeCursor"]) {
					var v:Vector.<BitmapData> = new Vector.<BitmapData>();
					v[0] = createCursorBitmapData(radius, color, showFill);
					
					var mcd:MouseCursorData = new MouseCursorData();
					mcd.data = v;
					mcd.hotSpot = new Point(radius,radius);
					
					Mouse.unregisterCursor(DRAWING_CURSOR);
					Mouse.registerCursor(DRAWING_CURSOR, mcd);
					
					return DRAWING_CURSOR;
				} else {
					return MouseCursor.AUTO;
				}
			}
			
			override protected function mouseDown(event:MouseEvent):void {
				super.mouseDown(event);
				if (Mouse.cursor == DRAWING_CURSOR) {				// Not _currentCursor, since might be trying to drag this dialog
					_drawing = true;
					if (brush.selected) {
						_graphics.lineStyle(ns.value, cp.selectedColor, 1);
						_graphics.moveTo(event.currentTarget.mouseX, event.currentTarget.mouseY);
					}
				} else _drawing = false;
			}
			
			protected function mouseMove(event:MouseEvent):void {
				if (_currentCursor == DRAWING_CURSOR && _drawing) {	// Not Mouse.cursor, since might be drawing behind this dialog
					if (brush.selected) {
						_graphics.lineTo(event.currentTarget.mouseX, event.currentTarget.mouseY);
					}
				}
			}
			
			protected function mouseOver():void {
				Mouse.cursor = MouseCursor.AUTO;
			}
			
			protected function mouseOut():void {
				Mouse.cursor = _currentCursor;
			}
			
			protected function mouseUp(event:MouseEvent):void {
				if (_currentCursor == DRAWING_CURSOR && _drawing) {	// Not Mouse.cursor, since might be drawing behind this dialog
					_drawing = false;
					if (brush.selected) {
						_graphics.lineTo(event.currentTarget.mouseX, event.currentTarget.mouseY);
					}
				}
			}
			
			protected function blockInteractivity(block:Boolean = true):void {
				if (block) {
					_clickBlocker.beginFill(0xffffff, 1);
					_clickBlocker.drawRect(0, 0, _canvas.width, _canvas.height);
					_clickBlocker.endFill();
				} else {
					_clickBlocker.clear();
				}
			}
			
			protected function specifyCursor():void {
				if (brush.selected || eraser.selected) {
					_currentCursor = createMouseCursor(ns.value/2, cp.selectedColor, brush.selected);
				} else {
					_currentCursor = MouseCursor.AUTO;
				}
			}

			protected function toolSelected(which:String):void {
				switch (which) {
					case 'brush':	brush.selected = true; eraser.selected = stop.selected = false;	break;
					case 'eraser':	eraser.selected = true; brush.selected = stop.selected = false;	break;
					case 'stop':	stop.selected = true; brush.selected = eraser.selected = false;	break;
				}
				blockInteractivity(!stop.selected);
				specifyCursor();
			}
		]]>
	</fx:Script>
	
	<s:VGroup paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10" horizontalAlign="center">
		<s:HGroup verticalAlign="top" gap="5">
			<s:VGroup horizontalAlign="center" gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" width="40" >
				<s:Label text="{resourceManager.getString('Chrome','TOOL')}" fontWeight="bold" color="0x000000" />
				<ui:ToolButton id="brush" icon="{SmallPaintbrushIcon}" selected="true" toolTip="PAINTBRUSH" click="toolSelected('brush');"/>
				<ui:ToolButton id="stop" icon="{ClearScreenIcon}" selected="false" toolTip="STOP_DRAWING" click="toolSelected('stop');" />
				<ui:ToolButton id="eraser" icon="{EraserIcon}" selected="false" toolTip="ERASER" click="toolSelected('eraser');" visible="false" />
			</s:VGroup>
			<ui:VerticalSeparator height="100%"/>
			<s:VGroup horizontalAlign="center" gap="5" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" width="40" >
				<s:Label fontWeight="bold" color="0x000000" text="{resourceManager.getString('Chrome','OPTION')}"/>
				<s:Spinner id="ns" width="24" height="24" minimum="2" maximum="20" stepSize="2" value="10" toolTip="BRUSH_SIZE" enabled="{!stop.selected}" change="specifyCursor();" />
				<s:Group enabled="{!stop.selected}" width="24" height="24" toolTip="BRUSH_EXAMPLE">
					<s:Ellipse x="{12 - ns.value/2}" y="{12 - ns.value/2}" width="{ns.value}" height="{ns.value}">
						<s:stroke>
							<s:SolidColorStroke color="0x888888" weight="1" pixelHinting="false" alpha="{stop.selected ? 0 : 1}"/>
						</s:stroke>
						<s:fill>
							<s:SolidColor color="{cp.selectedColor}" alpha="{brush.selected ? 1 : 0}" />
						</s:fill>
					</s:Ellipse>
				</s:Group>
				<mx:ColorPicker id="cp" showTextField="false" selectedColor="0xFF0000" change="specifyCursor(); Mouse.cursor = _currentCursor;" enabled="{brush.selected}" toolTip="BRUSH_COLOR" />
			</s:VGroup>
		</s:HGroup>
		<s:Button label="Clear" click="_graphics.clear();"/>
	</s:VGroup>
</dialogs:DialogBox>
