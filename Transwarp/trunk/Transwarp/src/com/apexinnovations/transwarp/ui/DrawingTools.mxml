<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:gfx="com.apexinnovations.transwarp.graphics.*"
		  xmlns:ui="com.apexinnovations.transwarp.ui.*"
		  visible.closed="false" visible.childInteractionComplete="false"
		  mouseOver="mouseOver();" mouseOut="mouseOut();" mouseOver.childInteracting="no_op();" mouseOut.childInteracting="no_op();">
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.data.Courseware;
			import com.apexinnovations.transwarp.graphics.*;
			import com.apexinnovations.transwarp.ui.*;
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			import com.apexinnovations.transwarp.webservices.ConfigService;
			
			import mx.managers.PopUpManager;
			
			import spark.core.SpriteVisualElement;

			TranswarpVersion.revision = "$Rev$";
			
			[Bindable] public var color:uint = 0;
			[Bindable] public var size:uint = 10;
			[Bindable] public var tool:String = 'brush';
			public var anchor:DisplayObject = null;
			[Bindable] public var fadeDuration:uint = 1500;
			
			public function display():void {
				currentState = 'default';
				visible = true;
				
				var location:Point = new Point(anchor.x, anchor.y);
				location = anchor.localToGlobal(location);
				y = location.y - height/2;
				
				PopUpManager.bringToFront(this);
				setFocus();
			}
			
			protected function mouseOut():void {
				currentState = 'closed';
			}
			
			protected function mouseOver():void {
				currentState = 'default';
			}
			
			protected function no_op():void {
				// Do nothing
			}
			
			import com.apexinnovations.transwarp.Transwarp;			
			protected function toolSelected(which:String):void {
				switch (which) {
					case 'brush':	eraser.selected = clear.selected = false;	break;
					case 'eraser':	brush.selected = clear.selected = false;	break;
					case 'clear':	brush.selected = eraser.selected = false;	break;
				}
				var canvas:SpriteVisualElement = (this.parentApplication as Transwarp).canvas;
				var g:Graphics = canvas.graphics;
				if (brush.selected) {
					g.clear();
					g.beginFill(0x000000, 0.3);
					g.drawRect(0, 0, canvas.width, 400);
					g.endFill();
				}
				if (eraser.selected) {
					g.clear();
					g.beginFill(0x000000, 0.1);
					g.drawRect(0, 0, canvas.width, 400);
					g.endFill();
				}
				if (clear.selected) {
					g.clear();
				}
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="childInteractionComplete" />
		<s:State name="childInteracting" />
		<s:State name="closed" />
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="*" toState="closed">
			<s:Parallel targets="{[this, background, brush, eraser, clear]}"> <!-- don't know why I have to set it for each of these... -->
				<s:Fade duration="{fadeDuration}" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="*" toState="childInteractionComplete">
			<s:Parallel targets="{[this, background, brush, eraser, clear]}">
				<s:Fade duration="{2 * fadeDuration}" />	<!-- allow more time when changing color -->
			</s:Parallel>
		</s:Transition>
	</s:transitions>

	<s:HGroup>
		<s:Rect alpha="0" width="32" /> <!-- This is there so mouse starts over the control so we don't have to worry about initial mouseOut() -->
		<s:Group>
			<s:Rect id="background" width="100%" height="100%" top="0" radiusX="5" radiusY="5" alpha="0.9" visible.closed="false">
				<s:fill>
					<s:LinearGradient rotation="90">
						<s:GradientEntry ratio="0" color="#ffffff"/>
						<s:GradientEntry ratio="1" color="#cccccc"/>		
					</s:LinearGradient>
				</s:fill>
				<s:filters>
					<s:DropShadowFilter blurX="7" blurY="7" distance="7" alpha=".4" />
				</s:filters>
			</s:Rect>
			<s:HGroup verticalAlign="middle" paddingBottom="15" paddingLeft="15" paddingRight="15" paddingTop="17">
				
				<s:Label text="{resourceManager.getString('Chrome','TOOL')}" fontWeight="bold" color="0x000000" />
				
				<ui:ToolButton id="brush" icon="{SmallPaintbrushIcon}" selected="true" visible.closed="false" toolTip="Paintbrush" x="2" y="2" click="toolSelected('brush');"/>
				<ui:ToolButton id="eraser" icon="{EraserIcon}" selected="false" visible.closed="false" toolTip="Eraser" x="2" y="2"  click="toolSelected('eraser');" />
				<ui:ToolButton id="clear" icon="{ClearScreenIcon}" selected="false" visible.closed="false" toolTip="Clear Screen" x="2" y="2" click="toolSelected('clear');" />
				
				<s:Label fontWeight="bold" color="{clear.selected ? 0x888888 : 0x000000}"
						 text="{resourceManager.getString('Chrome','SIZE')}"/>
				<s:NumericStepper id="ns" minimum="2" maximum="20" stepSize="2" value="10" toolTip="Choose a brush size" change="size=ns.value" enabled="{!clear.selected}" />
				
				<s:Label fontWeight="bold" color="{brush.selected ? 0x000000 : 0x888888}"
						 text="{resourceManager.getString('Chrome','COLOR')}"/>
				
				<mx:ColorPicker id="cp" showTextField="false" selectedColor="0xFF0000" itemRollOver="currentState='childInteracting'" open="currentState='childInteracting'" close="currentState='childInteractionComplete'" change="currentState='childInteractionComplete'; color=cp.selectedColor;" enabled="{brush.selected}" toolTip="Choose a brush color"/>
				
				<s:Group enabled="{!clear.selected}">
					<s:Ellipse x="{10 - ns.value/2}" y="{10 - ns.value/2}" width="{ns.value}" height="{ns.value}">
						<s:stroke>
							<s:SolidColorStroke color="0x888888" weight="1" pixelHinting="false" alpha="{clear.selected ? 0 : 1}"/>
						</s:stroke>
						<s:fill>
							<s:SolidColor color="{cp.selectedColor}" alpha="{brush.selected ? 1 : 0}" />
						</s:fill>
					</s:Ellipse>
				</s:Group>
			</s:HGroup>
		</s:Group>
	</s:HGroup>
</s:Group>
