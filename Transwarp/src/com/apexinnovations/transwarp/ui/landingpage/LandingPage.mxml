<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.data.Course;
			import com.apexinnovations.transwarp.data.Courseware;
			import com.apexinnovations.transwarp.data.CoursewareObject;
			import com.apexinnovations.transwarp.data.Folder;
			import com.apexinnovations.transwarp.data.Page;
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			import com.greensock.loading.MP3Loader;
			
			TranswarpVersion.revision = "$Rev$";
			
			protected var _folder:Folder;
			protected var buttons:Vector.<LandingPageButton> = new Vector.<LandingPageButton>();
			protected var audioLoader:MP3Loader;
			
			public function get folder():Folder { return _folder; }

			public function set folder(value:Folder):void {
				if(value === _folder)
					return;
				
				if(audioLoader) {
					audioLoader.pauseSound();
					audioLoader.dispose();
					audioLoader = null;
				}
				
				_folder = value;
				
				container.removeAllElements();
				
				if(_folder) {
					if(_folder.audio !== "none" || _folder.audio !== "false") {
						var baseURL:String = Courseware.instance.rootFolder + '/'
						audioLoader = new MP3Loader(baseURL + folder.audio);
						audioLoader.load();
					}
					var button:LandingPageButton;
					var i:int = 0;
					for each(var child:CoursewareObject in _folder.contents) {
						if(child is Page) {
							if(i < buttons.length) {
								button = buttons[i];
							} else {
								button = new LandingPageButton();
								buttons.push(button);
							}
							button.page = child as Page;
							container.addElement(button);
							i += 1;
						}
					}
					
					var n:int = container.numElements;
					
					if(n < 5) {
						container.requestedColumnCount = 1;
					} else if(n > 8) {
						container.requestedColumnCount = 3;
					} else
						container.requestedColumnCount = 2;
					
					container.validateDisplayList();
					visible = true;
				} else {
					visible = false;
				}
				
			}
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void {
				if(visible) {
					
					
					var minGap:Number = 20;
					var maxGap:Number = 250;
					
					var cols:Number = container.columnCount;
					var rows:Number = container.rowCount;
					
					var w:Number = cols * container.columnWidth;// + (cols-1) * container.horizontalGap;
					var h:Number = cols * container.rowHeight + (rows-1) * container.verticalGap;
									
					var hOverflow:Number = w - unscaledWidth * 0.8;
					var vOverflow:Number = h - unscaledHeight * 0.8;
					var scale:Number = 1;
					
					var hGap:Number = Math.min(maxGap, Math.max(minGap, -hOverflow / (cols-1)));
					//var vGap:Number = Math.min(Math.max(20, -vOverflow / (rows-1)), maxGap);
					
					container.horizontalGap = hGap;
					//container.verticalGap = vGap;
					
					var hgapspace:Number = hGap * (cols - 1)
					//var vgapspace:Number = vGap * (rows - 1);
						
					w += hgapspace;
					//h += vgapspace;
					
					hOverflow += hgapspace;
					//vOverflow += vgapspace;
					
					if(hOverflow > 0 && hOverflow > vOverflow) {
						scale = (unscaledWidth*0.8) / w;
					} else if(vOverflow > 0 && vOverflow > hOverflow) {
						scale = (unscaledHeight*0.8) / h;
					}
					
					container.scaleX = container.scaleY = scale;
					
					container.x = (unscaledWidth - w * scale)/2;
					container.y = (unscaledHeight - h * scale)/2;
					
					//trace(w, h, unscaledWidth, unscaledHeight, scale, container.x, container.y);

				}
				
				super.updateDisplayList(unscaledWidth, unscaledHeight)
			}

		]]>
	</fx:Script>
	
	<s:TileGroup id="container" horizontalCenter="0" verticalCenter="0" orientation="columns" verticalGap="20" horizontalGap="20"/>
	
</s:Group>
