<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:gfx="com.apexinnovations.transwarp.graphics.*"
		 xmlns:ui="com.apexinnovations.transwarp.ui.*"
		 width="50" minHeight="{buttonGroup.height + 70}"
		 addedToStage="onAdded()">

	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.Transwarp;
			import com.apexinnovations.transwarp.data.*;
			import com.apexinnovations.transwarp.graphics.*;
			import com.apexinnovations.transwarp.ui.*;
			import com.apexinnovations.transwarp.utils.TranswarpVersion;
			
			import flash.printing.*;
			
			import flashx.textLayout.elements.TextFlow;
			
			import mx.binding.utils.BindingUtils;
			import mx.core.IVisualElement;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.utils.ColorUtil;
			
			TranswarpVersion.revision = "$Rev$";

			protected var commentDialog:CommentDialog = null;
			protected var configDialog:ConfigDialog = null;
			protected var helpDialog:HelpDialog = null;
			protected var keyQuestionsDialog:KeyQuestionsDialog = null;
			protected var supportTextDialog:SupportTextDialog = null;
			protected var historyDialog:HistoryDialog = null;
			protected var linksDialog:LinksDialog = null;

			//Convenience variable for enabling buttons without needing to write a novel for each one
			[Bindable] protected var currentPage:Page;
			protected function setPage(value:Page):void { currentPage = value; }
			
			override protected function createChildren():void {
				super.createChildren();
				
				BindingUtils.bindSetter(setPage, Courseware.instance, "currentPage");
				
				for(var i:int=0; i<buttonGroup.numElements; ++i){
					var e:IVisualElement = buttonGroup.getElementAt(i);
					if(e is IconButton) {
						e.width = 30;
						e.height = 30;
						if(i+1 < buttonGroup.numElements)
							buttonGroup.addElementAt(new HorizontalSeparator(), i+1);
					}
				}
				
			}
			
			protected function maximize(event:FullScreenEvent):void {
				currentState = event.fullScreen ? "maximized" : "default";
			}


			protected function onAdded():void {
				stage.addEventListener(FullScreenEvent.FULL_SCREEN, maximize);
			}

			protected function commentOnPage(evt:MouseEvent):void {
				if (!commentDialog)
					commentDialog = CommentDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), CommentDialog, false, PopUpManagerChildList.POPUP));

				commentDialog.display();
			}
			
			protected function configureOptions(evt:MouseEvent):void {
				// Modal, so must be created every time or we get setFocus() issues
				configDialog = ConfigDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), ConfigDialog, true, PopUpManagerChildList.POPUP));
				
				configDialog.display();
			}
			
			protected function showHelpPages(evt:MouseEvent):void {
				if (!helpDialog)
					helpDialog = HelpDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), HelpDialog, false, PopUpManagerChildList.POPUP));
				
				helpDialog.display();
			}
			
			protected function showKeyQuestions(evt:MouseEvent):void {
				if (!keyQuestionsDialog)
					keyQuestionsDialog = KeyQuestionsDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), KeyQuestionsDialog, false, PopUpManagerChildList.POPUP));

				keyQuestionsDialog.display();
			}
			
			protected function showPageUpdates(evt:MouseEvent):void {
				if (!historyDialog)
					historyDialog = HistoryDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), HistoryDialog, false, PopUpManagerChildList.POPUP));

				historyDialog.display();
			}
			
			protected function showRelatedLinks(evt:MouseEvent):void {
				if (!linksDialog)
					linksDialog = LinksDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), LinksDialog, false, PopUpManagerChildList.POPUP));
				
				linksDialog.display();
			}
			
			protected function showSupportText(evt:MouseEvent):void {
				if (!supportTextDialog)
					supportTextDialog = SupportTextDialog(PopUpManager.createPopUp(DisplayObjectContainer(this.systemManager), SupportTextDialog, false, PopUpManagerChildList.POPUP));
				
				supportTextDialog.display();
			}
			
			protected function printStage(evt:MouseEvent):void {
				var printJob:PrintJob = new PrintJob();
				var options:PrintJobOptions = new PrintJobOptions();
				options.printAsBitmap = true;
				
				if (printJob.start()) {
					var printSprite:Sprite = new Sprite();
					var bitmapData:BitmapData;
					
					if (Courseware.instance.user.printSlideOnly) {
						var contents:ContentArea = (this.parentApplication as Transwarp).contentArea;

						bitmapData = new BitmapData(contents.width, contents.height);
						bitmapData.draw(contents);
					} else {
						bitmapData = new BitmapData(stage.stageWidth,stage.stageHeight);
						bitmapData.draw(stage);
					}
					var screenShot:Bitmap = new Bitmap(bitmapData);
										
					//scale it to fill the page (portrait orientation):
					var myScale:Number;
					printSprite.addChild(screenShot);
					
					//========== printjob bug fix - prevent blank pages: ==========
					printSprite.x = 2000; //keep it hidden to the side of the stage
					stage.addChild(printSprite); //add to stage - prevents blank pages
					//=============================================================
					
					myScale = Math.min(printJob.pageWidth/printSprite.width, printJob.pageHeight/printSprite.height);
					printSprite.scaleX = printSprite.scaleY = myScale;
					var printArea:Rectangle = new Rectangle(0, 0, printJob.pageWidth/myScale, printJob.pageHeight/myScale);
					
					printJob.addPage(printSprite,printArea,options);
					printJob.send();
					
					stage.removeChild(printSprite);
					printSprite = null;
				}
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="default" />
		<s:State name="maximized" />
	</s:states>
	
	<s:Rect width="100%" height="100%" topRightRadiusX="12" bottomRightRadiusX="12">
		<s:fill>
			<s:LinearGradient rotation="90" >
				<s:GradientEntry color="{Courseware.instance.color}" ratio="0.48" />
				<s:GradientEntry color="{ColorUtil.adjustBrightness2(Courseware.instance.color, -40)}"  />
			</s:LinearGradient>
		</s:fill>
		<s:filters>
			<s:DropShadowFilter blurX="7" blurY="7" distance="7" alpha=".4" />
			<s:DropShadowFilter blurX="6" blurY="6" angle="225" inner="true" alpha=".25" />
		</s:filters>
	</s:Rect>
	
	<s:VGroup id="buttonGroup" top="15" width="100%" horizontalAlign="center" gap="10">
		<ui:IconButton artClass="{KeyQuestionIcon}" click="showKeyQuestions(event);" enabled="{currentPage.hasQuestions}"/>
		<ui:IconButton artClass="{SupportingTextIcon}" click="showSupportText(event);" enabled="{currentPage.hasSupportText}"/>
		<ui:IconButton artClass="{HistoryIcon}" click="showPageUpdates(event);" enabled="{currentPage.hasUpdates}"/>		
		<ui:IconButton artClass="{LinksIcon}" click="showRelatedLinks(event);" enabled="{currentPage.hasLinks}"/>
		<ui:IconButton artClass="{CommentIcon}" click="commentOnPage(event);"/>
		<ui:IconButton artClass="{FavoritesIcon}" />
		<ui:IconButton artClass="{PaintbrushIcon}" />
		<ui:IconButton artClass="{AudioIcon}" />
		<ui:IconButton artClass="{ConfigurationIcon}" click="configureOptions(event);" />
		<ui:IconButton artClass="{SnapshotIcon}" click="printStage(event);" />
		<ui:IconButton artClass="{HelpIcon}"  click="showHelpPages(event);"/>
	</s:VGroup>
	
	<s:VGroup width="100%" horizontalAlign="center" gap="10" bottom="10">
		<ui:HorizontalSeparator visible="{height == minHeight}"/>
		<ui:IconButton artClass="{MaximizeIcon}" width="30" height="30" click="stage.displayState=StageDisplayState.FULL_SCREEN" includeIn="default" />
		<ui:IconButton artClass="{MinimizeIcon}" width="30" height="30" click="stage.displayState=StageDisplayState.NORMAL" includeIn="maximized"/>
	</s:VGroup>
	
	
</s:Group>
