<?xml version="1.0" encoding="utf-8"?>
<application:TranswarpPrototype xmlns:fx="http://ns.adobe.com/mxml/2009"
						 xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx"
						 xmlns:application="com.apexinnovations.transwarp.application.*"
						 xmlns:ui="com.apexinnovations.transwarp.ui.*"
						 preloader="com.apexinnovations.transwarp.application.preloader.CustomPreloader"
						 frameRate="30">

	<fx:Declarations>
		<s:TitleWindow title="Title" id="infoDialog" close="PopUpManager.removePopUp(infoDialog)" width="400" height="300">
			<s:TextArea id="infoText" height="100%" width="100%"/> 
		</s:TitleWindow>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.apexinnovations.transwarp.application.events.PageSelectionEvent;
			import com.apexinnovations.transwarp.config.IConfigurationAcceptor;
			import com.apexinnovations.transwarp.webservices.*;
			
			import flash.events.TimerEvent;
			import flash.utils.Timer;
			
			import flashx.textLayout.elements.IConfiguration;
			
			import mx.collections.XMLListCollection;
			import mx.managers.PopUpManager;
			
			
			
			protected var manager:CustomSystemManager;
			protected var loader:Loader;
			protected var visitTimer:Timer = new Timer(1000);
			protected var idleTimer:Timer = new Timer(1000);
			protected var visit:VisitService = new VisitService();
			protected var visitSession:uint = 0;
			protected var timeout:uint = 0;
			protected var currentlyIdle:Boolean = false;
			
			protected override function createChildren():void {
				super.createChildren();
				manager = CustomSystemManager(systemManager);
				
				if (!manager.xml || manager.xml.localName() == 'error') {
					// XML load error
					popupInfoDialog('There was an error loading data from the server.\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111.');
				} else {
					leftBar.productData = manager.xml.product.courses[0];
					leftBar.setSelection(manager.xml.user.@startPage);
					timeout = uint(manager.xml.user.@coursewareTimeout);
					
					container.addEventListener(Event.COMPLETE, loadComplete);
					container.addEventListener(Event.OPEN, loadStarted);
					container.addEventListener(ProgressEvent.PROGRESS, loadProgress);
					container.addEventListener(IOErrorEvent.IO_ERROR, loadError);
					
					// Add event listeners to prevent courseware "timeout"
					manager.addEventListener(KeyboardEvent.KEY_DOWN, resetTimeout);
					manager.addEventListener(MouseEvent.CLICK, resetTimeout);
					manager.addEventListener(MouseEvent.MOUSE_MOVE, resetTimeout);
					
					// Set the idle timer
					idleTimer.delay = 1000 * timeout;
					idleTimer.addEventListener(TimerEvent.TIMER, idleTimeout);
					idleTimer.start();

					container.mask = contentMask;
				}
			}
			
			protected function resetTimeout(event:Event):void {
				if (currentlyIdle) {
					currentlyIdle = infoDialog.isPopUp;	// turns false when popup closed
				}
				if (!currentlyIdle) {
					// Set the idle timer
					idleTimer.reset();
					idleTimer.delay = 1000 * timeout;
					idleTimer.start();
					
					if (!visitTimer.running) {
						// Need to start a new visit
						timerHandler(new TimerEvent(TimerEvent.TIMER_COMPLETE));
					}
				}
			}
			
			protected function idleTimeout(event:Event):void {
				if (!currentlyIdle) {
					// close current session
					visit.dispatch(visitSession);
					visitSession = 0;
					
					// stop all timers and popup dialog
					idleTimer.stop();
					visitTimer.stop();
					popupInfoDialog('You have been idle for ' + timeout/60 + ' minutes.\n\nPlease close this dialog box to resume the course.', 'You Appear to be Idle');

					currentlyIdle = true;
				}
			}
			
			protected function popupInfoDialog(info:String, title:String = 'Error'):void {
				if (!currentlyIdle) {
					if (infoDialog.isPopUp) PopUpManager.removePopUp(infoDialog);	// Take down any currently displayed dialogs
					
					PopUpManager.addPopUp(infoDialog, this, true);
					PopUpManager.centerPopUp(infoDialog);
					infoText.text = info;
					infoDialog.title = title;
				}
			}
			
			protected function pageSelectionChanged(event:PageSelectionEvent):void {
				
				// stop any old timers
				visitTimer.stop();
				
				// update the current visit
				if (visitSession > 0) {
					visit.dispatch(visitSession);					
				}
				
				// set the new pageID
				ApexWebService.pageID = uint(event.id);
				
				// stop current page from running and load new page
				SoundMixer.stopAll();
				container.unloadAndStop();
				container.load(getURL(ApexWebService.pageID));

				// Allow 5 seconds to begin saving a new visit
				visitTimer.delay = 5000;
				visitTimer.addEventListener(TimerEvent.TIMER, timerHandler);
				visitTimer.start();

				progressPanel.title = 'Loading ' + manager.xml.product..page[ApexWebService.pageID - 1].@name + '...';
				progressPanel.visible = true;
				progressBar.setProgress(0,100);
			}
			
			protected function timerHandler(event:TimerEvent):void {
				// stop the timer
				visitTimer.stop();
				
				if (visitTimer.delay == 5000 || visitSession == 0) {
					// create new visitSession
					visitSession = 0;
					visit.addEventListener(ApexWebServiceEvent.PAGE_COMPLETE, visitSaved);
					visit.addEventListener(ApexWebServiceEvent.PAGE_FAILURE, visitFailed);
					visit.dispatch();					
				} else {
					// update current session
					visit.dispatch(visitSession);					
				}
				
				// restart timer with delay of 1 minute
				visitTimer.delay = 60000;
				visitTimer.start();
			}

			protected function visitSaved(event:ApexWebServiceEvent):void {
				if (event.data.insertID) {
					visitSession = event.data.insertID;
				}
			}
			
			protected function visitFailed(event:ApexWebServiceEvent):void {
				// TODO: How are we handling this?
			}
			
			protected function loadStarted(event:Event): void {
				// TODO
			}
			
			protected function loadComplete(event:Event):void {
				var content:DisplayObject = container.content;
				if(content is IConfigurationAcceptor)
					IConfigurationAcceptor(content).config = <div>woah, brah</div>;
				progressPanel.visible = false;

				var page:XML = manager.xml.product..page[ApexWebService.pageID - 1];
				
				rightBar.updatesButton.enabled = page.updates.length > 0;
				rightBar.toolsButton.enabled = page.tools.length > 0;
				rightBar.bookmarksButton.enabled = true;
				rightBar.commentsButton.enabled = true;
				rightBar.linksButton.enabled = page.links.length > 0;
				rightBar.transcriptButton.enabled = page.transcript;
				rightBar.questionsButton.enabled = page.questions.length > 0;
				rightBar.instructionsButton.enabled = page.transcript;
			}
			
			protected function loadProgress(event:ProgressEvent):void {
				progressBar.setProgress(event.bytesLoaded, event.bytesTotal);
			}
			
			protected function loadError(event:Event):void {
				var page:XML = manager.xml.product..page[ApexWebService.pageID - 1];

				rightBar.updatesButton.enabled = false;
				rightBar.toolsButton.enabled = false;
				rightBar.bookmarksButton.enabled = false;
				rightBar.commentsButton.enabled = false;
				rightBar.linksButton.enabled = false;
				rightBar.transcriptButton.enabled = false;
				rightBar.questionsButton.enabled = false;
				rightBar.instructionsButton.enabled = false;
				
				var log:LogService = new LogService();
				log.dispatch("Unable to load page content: " + getURL(ApexWebService.pageID));
				progressPanel.visible = false;
				popupInfoDialog('There was an error loading the page from the server.\n\nPlease contact Apex Technical Support at 1-866-294-4599 x111. (ID: ' + ApexWebService.pageID + ')', 'Page Not Found - ' + page.@name);
			}

			private function getURL(number:int):String {
				return manager.xml.@rootFolder + '/PAGE_' + zeroPad(number, 6) + '.swf';
			}
			
			private function zeroPad(number:int, width:int):String {
				var s:String = '' + number;
				while(s.length < width) s = '0' + s;
				return s;
			}
		]]>
	</fx:Script>	
	
	
	<application:layout>
		<ui:TranswarpLayout />
	</application:layout>
	
	<s:VGroup width="100%" height="100%" gap="0">
		<ui:TopBar depth="1" />
		<s:Group depth="0" width="100%" height="100%">
			<mx:SWFLoader id="container" left="20" right="40" bottom="0" top="0" trustContent="false"/>
			<ui:LeftBar id="leftBar" x="0" top="5" bottom="5" pageSelectionChanged="pageSelectionChanged(event)"/>
			<ui:RightBar id="rightBar" right="0" />
			<s:Panel id="progressPanel" title="Loading..." width="30%" height="78" horizontalCenter="0" verticalCenter="0" visible="false" backgroundColor="0xFFFFFF">
				<s:VGroup left="10" right="10" top="10" bottom="10">
					<mx:ProgressBar id="progressBar" labelPlacement="bottom" minimum="0" maximum="100" label="0%" direction="right" mode="manual" width="100%"/>
				</s:VGroup>
			</s:Panel>
			
			<s:Group id="contentMask"  top="0" bottom="0" left="19" right="39">
				<s:Rect height="100%" width="100%">
					<s:fill>
						<s:SolidColor color="0x00ffff" alpha="0"/>
					</s:fill>
				</s:Rect>
			</s:Group>
		</s:Group>
	</s:VGroup>
	
</application:TranswarpPrototype>
